图解jvm线程引擎和内存共享区的交互及此背景下的程序计数器内幕解密

多线程的Java应用程序：为类让每个线程正常工作提出类线程计数器（Program Counter Register），
                    每个线程都有自己的程序计数器，这样当线程执行切换的时候就可以在上次执行的基础上继续执行
                    仅仅从一条线程执行的角度而言，代码是一条一条的往下执行的，整个时候就是Program Counter Register，
                    JVM就是通过读取Program Counter Register的值来决定该线程下一条需要执行的字节码指令，进而进行选择
                    语句、循环、异常处理等；
线程：
从OOP语言：相当于一个对象，该对象中具有执行代码，同时也有要处理的数据，数据包含Thread工作时候要访问的数据，
同时也包含现在的stack，在stack中包含类Thread版本的数据，也包含了拷贝的全局数据
从面向过程的角度而已：线程=代码+数据

Main Memory：全局共享内存空间